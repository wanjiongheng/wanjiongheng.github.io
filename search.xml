<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F12%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[elasticsearch集群搭建和javaApi的使用]]></title>
    <url>%2F11%2F01%2Felasticsearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%92%8CjavaApi%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[elasticsearch简介elasticsearch 是基于lucene的高度可扩展的开源全文搜索和分析引擎。官网上介绍是一位程序员为了给他厨师妻子做一个食谱搜索引擎。使用lucene开发，后来发展成为现在的elasticsearch。第一个版本发布于2010年，现在github发展的特别活跃，到今天，已经有1100位github的代码贡献者，223个发行的版本。 足以说明elasticsearch的强大，使用官网上的话，elasticsearch可以让用户快速的、近乎实时(插入到可搜索通常为1秒)、存储和分析大量数据。 elasticsearch 特性1、速度快。elasticsearch对所有的内容进行了索引。2、可扩展性，可以在单节点运行elasticsearch，生产环境可以在300节点集群。所以可以水平增加节点以处理请求的能力。3、高可用。提供了副本，主节点挂掉，可以检测故障，重新选择新的节点。4、灵活性。数字，文本，地理位置，结构化，非结构化。支持的数据类型很多。应用程序搜索，安全分析和日志记录都依赖Elasticsearch来解决各种挑战。 elasticsearch 中的一些概念。 表头 表头 集群cluster 由一个节点或多个节点组成，cluster.name相同的节点。 节点node 一个节点node就是一个ElasticSearch的实例。可以设置是否可以为主节点，还是数据节点，还是协调节点。用户能够与集群中的任何节点通信，包括主节点。每一个节点都知道文档存在于哪个节点上，可以转发请求到相应的节点上。 分片shard 一个分片是最小的工作单元，仅仅保存索引中所有数据的一部分。默认是5个分片，1个副本。 主分片 索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。索引创建完成时，主分片的数量就固定了，但是复制分片的数量可以随时调整。 复制分片 是主分片的副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索或者从别的shard取回文档 索引index 索引是具有某些相似特征的文档的集合，它和数据库中的索引概念并不十分相同。我们可以把索引理解为数据库文档中的数据库。事实上，我们的数据被存储和索引在分片(shards)中，索引只是一个把一个或多个分片分组在一起的逻辑空间。然而，这只是一些内部细节——我们的程序完全不用关心分片 type类型 在索引中，我们可以定义一个或多个类型。类型是索引的逻辑类别/分区，其语义完全由开发者决定。通常，为具有一组公共字段的文档定义类型。例如，假设开发者运行博客平台并将所有数据存储在一个索引中。在此索引中，我们可以为用户数据定义类型，为博客数据定义另一种类型，并为注释数据定义另一种类型。我们可以把索引理解成数据库文档中的表。 文档 一条记录 以下是 es 和 关系型数据库的简单类比Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; ColumnsElasticsearch -&gt; Indices（索引簇）-&gt; Types -&gt; Documents -&gt; Fields## 集群环境搭建### elasticsearch 集群搭建下面我使用一台服务器搭建了三个节点的集群作为演示。由于一个节点默认的jvm内存大小是2g,我在一台服务器只有2G,在config目录下面我修改jvm.oprion配置，-xms 和 -xmx 设置为512M节点的数根据官方的说法要n/2+1个节点，为了防止脑裂。脑裂就是三个节点中的主节点出现问题，无法连接，就会从剩下的两个从节点中选举一个主节点，但是之前的主节点又恢复过来，可以根据第三个节点，让新选举的主节点降级为从节点。但是要是两个节点，让谁降级是不明确的。现在的最新的版本是6.4.2版本下载下来。官网可以直接下载。然后解压复制三份。配置文件如下： 启动 bin目录下面 ./bin/elasticsearch.sh后台运行 ./elasticsearch.sh -d然后可以到日志目录下看启动目录，没有报错可以了。或者netstat -tnlp，查看端口启动情况。 elasticsearch head 可视化工具的使用工具是node.js开发，所以需要安装node.js.下载地址：https://github.com/mobz/elasticsearch-head；点击clone or download按钮，点击download zip进行下载。下载完毕后解压到任意路径上，别放在elasticsearch安装路径上。 allow origin 修改elasticsearch配置文件可以跨域。123# 上面的配置中已经加入http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot; elasticsearch head配置文件的修改如下，（从网上找了一篇，然后截图 0.0） 使用grunt server &amp; 后台启动 插件的使用(ik,pinyin,sql)elasticsearch分词对中文支持的不好，需要安装ik分词插件。github 中可以找到插件，直接下载。千万注意，不然启动报错：插件的版本必须要和elasticsearch版本一致。 官方文档学习 curl操作。当我们在学习官方文档，他里面有好多curl操作。我们在本地操作服务器上的es,需要安装一个curl工具。推荐sense.使用谷歌浏览器加入sense的可执行程序。但是sense被chorme拉黑只能自己下载，然后使用谷歌在本地查找扩展程序。 javaApi操作elasticsearch自己的增删改查demo. git地址。 git@github.com:wanjiongheng/mysql-to-elasticsearch.git 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990这是创建索引的时候的配置如下：&#123; &quot;state&quot;: &quot;open&quot;, &quot;settings&quot;: &#123; &quot;index&quot;: &#123; &quot;number_of_shards&quot;: &quot;3&quot;, &quot;number_of_replicas&quot;: &quot;0&quot;, &quot;analysis&quot;: &#123; &quot;filter&quot;: &#123; &quot;my_pinyin&quot;: &#123; &quot;keep_joined_full_pinyin&quot;: &quot;true&quot;, &quot;none_chinese_pinyin_tokenize&quot;: &quot;false&quot;, &quot;keep_none_chinese_in_joined_full_pinyin&quot;: &quot;true&quot;, &quot;keep_original&quot;: &quot;true&quot;, &quot;keep_first_letter&quot;: &quot;false&quot;, &quot;keep_separate_first_letter&quot;: &quot;false&quot;, &quot;type&quot;: &quot;pinyin&quot;, &quot;keep_full_pinyin&quot;: &quot;false&quot; &#125; &#125;, &quot;analyzer&quot;: &#123; &quot;ik_pinyin_analyzer&quot;: &#123; &quot;filter&quot;: [ &quot;my_pinyin&quot;, &quot;word_delimiter&quot; ], &quot;type&quot;: &quot;custom&quot;, &quot;tokenizer&quot;: &quot;ik_smart&quot; &#125; &#125; &#125; &#125; &#125;, &quot;mappings&quot;: &#123; &quot;goods&quot;: &#123; &quot;properties&quot;: &#123; &quot;name_pinyin&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;note&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;flag&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;, &quot;modifyTime&quot;: &#123; &quot;type&quot;: &quot;long&quot; &#125;, &quot;brand_pinyin&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;createTime&quot;: &#123; &quot;type&quot;: &quot;long&quot; &#125;, &quot;price&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, &quot;name&quot;: &#123; &quot;type&quot;: &quot;keyword&quot;, &quot;fields&quot;: &#123; &quot;ik_smart_pinyin_analyzer&quot;: &#123; &quot;analyzer&quot;: &quot;ik_pinyin_analyzer&quot;, &quot;term_vector&quot;: &quot;with_positions_offsets&quot;, &quot;type&quot;: &quot;text&quot; &#125; &#125; &#125;, &quot;id&quot;: &#123; &quot;type&quot;: &quot;long&quot; &#125;, &quot;brand&quot;: &#123; &quot;type&quot;: &quot;keyword&quot;, &quot;fields&quot;: &#123; &quot;ik_smart_pinyin_analyzer&quot;: &#123; &quot;analyzer&quot;: &quot;ik_pinyin_analyzer&quot;, &quot;term_vector&quot;: &quot;with_positions_offsets&quot;, &quot;type&quot;: &quot;text&quot; &#125; &#125; &#125;, &quot;useState&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125; &#125; &#125; &#125;, &quot;aliases&quot;: [ &quot;goods_alias&quot; ],&#125; 最后，elasticsearch api博大精深。可自行学习。]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
</search>
